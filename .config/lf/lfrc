#!/bin/sh

# Sets
set shell sh
set shellopts "-eu"
set ifs "\n"
set scrolloff 10
set cursorpreviewfmt "\033[7;2m"
set previewer "~/.config/lf/previewer"
set icons
set hidden
set ignorecase
set statfmt "\033[7;36m %M \033[0m| \033[36m%p\033[0m| %c| %u| %g| %S| %t| -> %l"
set dupfilefmt "%b-%n%e"

# Commands
cmd on-redraw &{{
  if [ $lf_width -le 40 ]; then
    lf -remote "send $id set preview false"
    lf -remote "send $id set ratios 1"
  elif [ $lf_width -le 80 ]; then
    lf -remote "send $id set preview true"
    lf -remote "send $id set ratios 1:1"
  elif [ $lf_width -le 160 ]; then
    lf -remote "send $id set preview true"
    lf -remote "send $id set ratios 1:1:2"
  else
    lf -remote "send $id set preview true"
    lf -remote "send $id set ratios 1:1:2:4"
  fi
}}

cmd on-load &{{
  sleep 0.1
  lf -remote "send $id :on-redraw"
}}

# cmd drag-to %{{

# }}

cmd drag-from %{{
  dragon-drop -x -a $fx
}}

cmd paste-img %{{
  name="pasted-image"
  new_name="$name"
  i=0
  while [ -f "$new_name.png" ]; do
    i=$((i+1))
    new_name="$name-$i"
  done
  name="$new_name.png"

  xclip -selection clipboard -target image/png -o > "$name"
}}

cmd term &{{
  wezterm start --cwd "$PWD" & disown
}}

cmd open &{{
  case $(file --mime-type -Lb $f) in
    text/* | */json | */javascript)
      /home/kome/.dotfiles/.scripts/lf-helix.sh "$f"
      ;;
    *)
      case $f in
        *.nelua | *.env | *.tsx | *.ts)
          /home/kome/.dotfiles/.scripts/lf-helix.sh "$f"
          ;;
        *)
          xdg-open "$f" & disown
          ;;
      esac
      ;;
  esac
}}

cmd open-with $"$1" "$f"&

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract %{{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
  esac
}}

# compress current file or selected files with tar and gunzip
cmd tar %{{
  set -f
  mkdir $1
  cp -r $fx $1
  tar czf $1.tar.gz $1
  rm -rf $1
}}

# compress current file or selected files with zip
cmd zip %{{
  set -f
  mkdir $1
  cp -r $fx $1
  zip -r $1.zip $1
  rm -rf $1
}}

# compress current file or selected files with 7z
cmd 7z %{{
  set -f
  mkdir $1
  cp -r $fx $1
  7z a $1.7z $1
  rm -rf $1
}}

cmd delete %{{
  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  len=${#files[@]}

  result=$( [ "$len" -gt 1 ] && echo "files" || echo "file" )

  question="Trash ${len} ${result}?"

  for file in "${files[@]}"; do
    question="$question\n  $file"
  done

  yes="Yes"
  no="No"
  options="$yes\n$no"

  chosen="$(echo -e "$options" | rofi -theme-str 'entry { enabled: false;}' -i -show -p "$(echo -e "$question")" -dmenu -selected-row 0)"
  case $chosen in
    $yes)
      echo "Deleting..."
      for file in "${files[@]}"; do
        trash-put "$(basename "$file")"
      done
      ;;
  esac
}}

cmd trash-empty %{{
  question="Are you sure you would like to empty your trash directory"
  yes="Yes"
  no="No"
  options="$yes\n$no"

  chosen="$(echo -e "$options" | rofi -theme-str 'entry { enabled: false;}' -i -show -p "$question" -dmenu -selected-row 0)"
  case $chosen in
    $yes)
      echo "Emptying trash directoru..."
      trash-empty
      echo "Trash directory emptied"
      ;;
  esac
}}

cmd create ${{
  if [[ "$1" == */ ]]; then
    mkdir -p "$1"
  else
    DIR_PATH=$(dirname "$1")
    mkdir -p "$DIR_PATH"
    touch "$1"
  fi
}}

cmd chmod %{{
  if [ -z "${1+x}" ] || [ "$1" == "" ]; then
    echo "No params set" >&2
    exit 1
  fi

  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  for file in "${files[@]}"; do
    chmod $1 "$file"
  done
  lf -remote "send $id reload"
}}

cmd copy-absolute-path &{{
  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  for file in "${files[@]}"; do
    $HOME/.scripts/clip.sh add "$file"
  done
  notify-send "File paths added to clipboard"
}}

cmd copy-name-w-ext &{{
  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  for file in "${files[@]}"; do
    $HOME/.scripts/clip.sh add $(basename "$file")
  done
  notify-send "File names added to clipboard"
}}

cmd copy-name-wo-ext &{{
  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  for file in "${files[@]}"; do
    $HOME/.scripts/clip.sh add "$(basename "$file" | sed "s/\.[^.]*$//")"
  done
  notify-send "File names added to clipboard"
}}

cmd copy-parent-dir-path &{{
  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  for file in "${files[@]}"; do
    $HOME/.scripts/clip.sh add $(dirname "$file")
  done
  notify-send "Parent directory paths added to clipboard"
}}

cmd copy-image &{{
  IFS=";" read -r -a files <<< "$(echo "$fx" | tr "\n" ";")"
  for file in "${files[@]}"; do
    if [ "$XDG_SESSION_TYPE" == "wayland" ]; then
      notify-send "TODO: screenshot wayland"
      exit 1
    else
      xclip -selection clipboard -target image/png -i "$file"
    fi
    $HOME/.scripts/clip.sh recopy
  done
  notify-send "Parent directory paths added to clipboard"
}}

# Bindings

# Unbinds
map c
map V
map p
map G

map ge bottom

map <c-q> quit

nmap v visual
vmap v visual-accept

map <esc> &{{
  lf -remote "send $id clear"
  lf -remote "send $id unselect"
  lf -remote "send $id visual-discard"
}}

map "." set hidden!

map a push :create<space>

map D drag-from

map d delete
map <delete> delete
map u ${{
  echo
  trash-restore
}}
map p paste
map P paste-img
map x cut
map y copy

map e open
map o open
map <enter> open
map O open-with

map <c-r> :{{
  reload
  redraw
  source "~/.config/lf/lfrc"
}}

map ca copy-absolute-path
map cn copy-name-w-ext
map ce copy-name-wo-ext
map cp copy-parent-dir-path
map ci copy-image
# show the result of execution of previous commands
map ` !true

# Movement
map gd cd ~/Documents
map gw cd ~/Downloads
map gp cd ~/Pictures
map gs cd ~/Pictures/screenshots
map gv cd ~/Videos
map gm cd ~/Music
map gco cd ~/.config
map gcp cd ~/Documents/code-projects
map gce cd ~/Documents/code-projects/external-work
map gcn cd ~/Documents/code-projects/languages/nelua
map gcl cd ~/Documents/code-projects/languages/lua
